（单词以“空格”、“Tab”或“回车”“换行”分隔）



$(info ...) 打印信息。

$(warning ...) 打印警告信息。

$(error ...) 答应错误信息并停止make。

$(shell <shell command> <parm>) 返回值是Shell命令的标准输出。

$(call <expression>,<parm1>,<parm2>,<parm3>...) 创建新的参数化的函数。

$(eval <text>) 将<text>的内容作为makefile的一部分而被make解析和执行。

$(sort <list>) 给字符串<list>中的单词按升序排序，返回排序后的字符串，会去掉中相同的单词。

$(foreach <var>,<list>,<text>) 把参数<list>中的单词逐一取出放到参数<var>所指定的变量中，再执行<text>所包含的表达式。每一次<text>会返回一个字符串，循环过程中，<text>的所返回的每个字符串会以空格分隔，最后当整个循环结束时，<text>所返回的每个字符串所组成的整个字符串（以空格分隔）将会是foreach函数的返回值。<var>最好是一个变量名，<list>可以是一个表达式，而<text>中一般会使用<var>这个参数来依次枚举<list>中的单词。

$(if <condition>,<then-part>,<else-part>) 条件执行函数。如果<condition>返回非空字符串，<then-part>会被计算，否则<else-part>会被计算。返回值<then-part>的返回值，或者<else-part>的返回值，如果<else-part>没有被定义，那么，整个函数返回空字串。


【文件名操作】

$(dir <names...>) 取目录。从文件名序列<names>中取出目录部分。目录部分是指最后一个反斜杠（“/”）之前的部分。如果没有反斜杠，那么返回“./”。 返回文件名序列<names>的目录部分。

$(notdir <names...>)取文件。从文件名序列<names>中取出非目录部分。非目录部分是指最后一个反斜杠（“/ ”）之后的部分。 返回文件名序列<names>的非目录部分。

$(suffix <names...>) 取后缀。从文件名序列<names>中取出各个文件名的后缀。返回文件名序列<names>的后缀序列，如果文件没有后缀，则返回空字串。

$(basename <names...>) 取前缀。从文件名序列<names>中取出各个文件名的前缀部分。 返回文件名序列<names>的前缀序列，如果文件没有前缀，则返回空字串。

$(addsuffix <suffix>,<names...>) 加后缀。把后缀<suffix>加到<names>中的每个单词后面。 返回加过后缀的文件名序列。

$(addprefix <prefix>,<names...>) 加前缀。把前缀<prefix>加到<names>中的每个单词后面。 返回加过前缀的文件名序列。

$(join <list1>,<list2>)  单词连接。 把<list2>中的单词对应地加到<list1>的单词后面。如果<list1>的单词个数要比<list2>的多，那么，<list1>中的多出来的单词将保持原样。如果<list2>的单词个数要比<list1>多，那么，<list2>多出来的单词将被复制到<list1>中。 返回连接过后的字符串。



【字符串操作】

$(wildcard <pattern list>) 通配符展开。例如$(wildcard *.c subdir/*.c)返回所有当前dir下.c文件和subdir下.c文件。

$(patsubst <pattern>,<replacement>,<text>) 模式字符串替换。查找<text>中的单词是否符合模式<pattern>，如果匹配的话，则以<replacement>替换。这里，<pattern>可以包括通配符“%”，表示任意长度的字串。如果<replacement>中也包含“%”，那么，<replacement>中的这个“%”将是<pattern>中的那个“%”所代表的字串。（可以用“\”来转义，以“\%”来表示真实含义的“%”字符）。函数返回被替换过后的字符串。

$(patsubst %.c,%.o,$(wildcard *.c)) 返回当前目录下所有.c文件的.o文件列表。

${VAR:A=B} 替换变量。VAR中所有A字符结尾的字，A将被为B替换。$(<list>:%.c=%.o) 把<list>中的.c后缀换成.o后缀，返回.o文件列表。

$(subst <from>,<to>,<text>) 字符串替换。把字串<text>中的<from>字符串替换成<to>。 返回被替换过后的字符串。

$(strip <string>)  去空格。去掉<string>字串中开头和结尾的空字符。 返回被去掉空格的字符串值。

$(findstring <find>,<in>)  字符串查找。在字串<in>中查找<find>字串。 如果找到，那么返回<find>，否则返回空字符串。

$(filter <pattern...>,<text>) 过滤函数。以<pattern>模式过滤<text>字符串中的单词，保留符合模式<pattern>的单词。可以有多个模式。 返回符合模式<pattern>的字串。

$(filter-out <pattern...>,<text>) 反过滤函数。以<pattern>模式过滤<text>字符串中的单词，去除符合模式<pattern>的单词。可以有多个模式。 返回不符合模式<pattern>的字串。

$(word <n>,<text>) 取单词函数。取字符串<text>中第<n>个单词，从1开始。返回字符串<text>中第<n>个单词。如果<n>比<text>中的单词数要大，那么返回空字符串。

$(words <text>) 单词统计函数。统计<text>中字符串中的单词个数。 返回<text>中的单词数。

$(wordlist <s>,<e>,<text> )  取单词串函数。从字符串<text>中取从<s>开始到<e>的单词串。<s>和<e>是一个数字。 返回字符串<text>中从<s>到<e>的单词字串。如果<s>比<text>中的单词数要大， 那么返回空字符串。如果<e>大于<text>的单词数，那么返回从<s>开始，到<text>结束的单词串。



【符号】

= 当它的右边赋值是变量时，这个变量的定义在本条语句之前或之后都可以，即可以递归展开。

:= 它右边赋的值如果是变量，只能使用在这条语句之前定义好的，而不能使用本条语句之后定义的变量，即不可以递归展开。

?= 该符号左边的变量，如果在本条语句之前没有定义过，则执行本语句，如果已经定义，那么本语句什么都不做。

+= 是添加等号后面的值

% 是通配符，%.cc表示工程里的.cc文件

-include 表示无论include过程中出现什么错误，都不要报错继续执行。

@<cmd> 表示在make时不输出make的信息

$@ 表示目标文件名。在多目标的模式规则中，它代表的是哪个触发规则被执行的目标文件名。

$% 如果目标文件是一个静态库文件，它代表静态库的一个成员名。

$< 规则的第一个依赖文件名。如果是隐含规则，则它代表通过目标指定的第一个依赖文件。

$? 所有比目标文件更新的依赖文件列表，空格分割。如果目标是静态库文件名，代表的是库成员（.o文件）的更新情况。

$^ 规则的所有依赖文件列表，使用空格分隔。如果目标是静态库文件名，它所代表的只能是所有库成员（.o文件）名。

$+ 类似“$^”，但是它保留了依赖文件中重复出现的文件。主要用在程序链接时，库的交叉引用场合。

$(@D) 代表目标文件的目录部分（去掉目录部分的最后一个斜杠）。如果“$@”是“dir/foo.o”，那么“$(@D)”的值为“dir”。如果“$@”不存在斜杠，其值就是“.”（当前目录）。

$(@F) 目标文件的完整文件名中除目录以外的部分（实际文件名）。如果“$@”为“dir/foo.o”，那么“$(@F)”只就是“foo.o”。“$(@F)”等价于函数“$(notdir $@)”。

$(%D) $(%F) 当以如“archive(member)”形式静态库为目标时，分别表示库文件成员“member”名中的目录部分和文件名部分。它仅对这种形式的规则目标有效。

$(<D) $(<F) 分别表示规则中第一个依赖文件的目录部分和文件名部分。

$(^D) $(^F) 分别表示所有依赖文件的目录部分和文件部分（不存在同一文件）。

$(+D) $(+F) 分别表示所有依赖文件的目录部分和文件部分（可存在重复文件）。

$(?D) $(?F) 分别表示被更新的依赖文件的目录部分和文件部分。
